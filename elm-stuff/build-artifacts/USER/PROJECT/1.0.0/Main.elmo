Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values)
   return _elm.Main.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Main",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var delta = A2($Signal.map,
   $Time.inSeconds,
   $Time.fps(35));
   var Input = F2(function (a,b) {
      return {_: {}
             ,delta: b
             ,space: a};
   });
   var input = $Signal.sampleOn(delta)(A3($Signal.map2,
   Input,
   $Keyboard.space,
   delta));
   var Game = F3(function (a,b,c) {
      return {_: {}
             ,backgroundX: c
             ,foregroundX: b
             ,state: a};
   });
   var constants = {_: {}
                   ,backgroundScrollV: 40
                   ,foregroundScrollV: 80};
   var Pause = {ctor: "Pause"};
   var defaultGame = {_: {}
                     ,backgroundX: 0
                     ,foregroundX: 0
                     ,state: Pause};
   var Play = {ctor: "Play"};
   var $ = {ctor: "_Tuple2"
           ,_0: 800
           ,_1: 480},
   gameWidth = $._0,
   gameHeight = $._1;
   var update = F2(function (_v0,
   _v1) {
      return function () {
         return function () {
            return function () {
               var newGame = A2($Debug.watch,
               "game",
               _v1);
               return _U.replace([["foregroundX"
                                  ,_v1.foregroundX + _v0.delta * constants.backgroundScrollV]
                                 ,["backgroundX"
                                  ,_U.cmp(_v1.backgroundX,
                                  gameWidth) > 0 ? 0 : _v1.backgroundX + _v0.delta * constants.backgroundScrollV]],
               newGame);
            }();
         }();
      }();
   });
   var gameState = A3($Signal.foldp,
   update,
   defaultGame,
   input);
   var view = F2(function (_v4,
   _v5) {
      return function () {
         return function () {
            switch (_v4.ctor)
            {case "_Tuple2":
               return A3($Graphics$Element.container,
                 _v4._0,
                 _v4._1,
                 $Graphics$Element.middle)(A3($Graphics$Collage.collage,
                 gameWidth,
                 gameHeight,
                 _L.fromArray([$Graphics$Collage.move({ctor: "_Tuple2"
                                                      ,_0: 0 - _v5.backgroundX
                                                      ,_1: 0})($Graphics$Collage.toForm(A3($Graphics$Element.image,
                              gameWidth,
                              gameHeight,
                              "/images/background.png")))
                              ,$Graphics$Collage.move({ctor: "_Tuple2"
                                                      ,_0: gameWidth - _v5.backgroundX
                                                      ,_1: 0})($Graphics$Collage.toForm(A3($Graphics$Element.image,
                              gameWidth,
                              gameHeight,
                              "/images/background.png")))])));}
            _U.badCase($moduleName,
            "between lines 59 and 68");
         }();
      }();
   });
   var main = A3($Signal.map2,
   view,
   $Window.dimensions,
   gameState);
   _elm.Main.values = {_op: _op
                      ,gameHeight: gameHeight
                      ,gameWidth: gameWidth
                      ,Play: Play
                      ,Pause: Pause
                      ,constants: constants
                      ,Game: Game
                      ,defaultGame: defaultGame
                      ,Input: Input
                      ,update: update
                      ,view: view
                      ,main: main
                      ,gameState: gameState
                      ,delta: delta
                      ,input: input};
   return _elm.Main.values;
};